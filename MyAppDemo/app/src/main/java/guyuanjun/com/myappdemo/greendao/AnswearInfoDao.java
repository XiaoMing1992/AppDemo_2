package guyuanjun.com.myappdemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import guyuanjun.com.myappdemo.bean.AnswearInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANSWEAR_INFO".
*/
public class AnswearInfoDao extends AbstractDao<AnswearInfo, Long> {

    public static final String TABLENAME = "ANSWEAR_INFO";

    /**
     * Properties of entity AnswearInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Host_id = new Property(1, Long.class, "host_id", false, "HOST_ID");
        public final static Property Answear_id = new Property(2, Long.class, "answear_id", false, "ANSWEAR_ID");
        public final static Property Item_id = new Property(3, Long.class, "item_id", false, "ITEM_ID");
        public final static Property Host_nickname = new Property(4, String.class, "host_nickname", false, "HOST_NICKNAME");
        public final static Property Answear_nickname = new Property(5, String.class, "answear_nickname", false, "ANSWEAR_NICKNAME");
        public final static Property Answear_content = new Property(6, String.class, "answear_content", false, "ANSWEAR_CONTENT");
    }


    public AnswearInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AnswearInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANSWEAR_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HOST_ID\" INTEGER," + // 1: host_id
                "\"ANSWEAR_ID\" INTEGER," + // 2: answear_id
                "\"ITEM_ID\" INTEGER," + // 3: item_id
                "\"HOST_NICKNAME\" TEXT," + // 4: host_nickname
                "\"ANSWEAR_NICKNAME\" TEXT," + // 5: answear_nickname
                "\"ANSWEAR_CONTENT\" TEXT);"); // 6: answear_content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANSWEAR_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AnswearInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long host_id = entity.getHost_id();
        if (host_id != null) {
            stmt.bindLong(2, host_id);
        }
 
        Long answear_id = entity.getAnswear_id();
        if (answear_id != null) {
            stmt.bindLong(3, answear_id);
        }
 
        Long item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindLong(4, item_id);
        }
 
        String host_nickname = entity.getHost_nickname();
        if (host_nickname != null) {
            stmt.bindString(5, host_nickname);
        }
 
        String answear_nickname = entity.getAnswear_nickname();
        if (answear_nickname != null) {
            stmt.bindString(6, answear_nickname);
        }
 
        String answear_content = entity.getAnswear_content();
        if (answear_content != null) {
            stmt.bindString(7, answear_content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AnswearInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long host_id = entity.getHost_id();
        if (host_id != null) {
            stmt.bindLong(2, host_id);
        }
 
        Long answear_id = entity.getAnswear_id();
        if (answear_id != null) {
            stmt.bindLong(3, answear_id);
        }
 
        Long item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindLong(4, item_id);
        }
 
        String host_nickname = entity.getHost_nickname();
        if (host_nickname != null) {
            stmt.bindString(5, host_nickname);
        }
 
        String answear_nickname = entity.getAnswear_nickname();
        if (answear_nickname != null) {
            stmt.bindString(6, answear_nickname);
        }
 
        String answear_content = entity.getAnswear_content();
        if (answear_content != null) {
            stmt.bindString(7, answear_content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AnswearInfo readEntity(Cursor cursor, int offset) {
        AnswearInfo entity = new AnswearInfo();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AnswearInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHost_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAnswear_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setItem_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setHost_nickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnswear_nickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswear_content(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AnswearInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AnswearInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AnswearInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
