package guyuanjun.com.myappdemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import guyuanjun.com.myappdemo.bean.CommentInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT_INFO".
*/
public class CommentInfoDao extends AbstractDao<CommentInfo, Long> {

    public static final String TABLENAME = "COMMENT_INFO";

    /**
     * Properties of entity CommentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Long.class, "user_id", false, "USER_ID");
        public final static Property Item_id = new Property(2, Long.class, "item_id", false, "ITEM_ID");
        public final static Property Comment = new Property(3, String.class, "comment", false, "COMMENT");
        public final static Property Comment_time = new Property(4, java.util.Date.class, "comment_time", false, "COMMENT_TIME");
        public final static Property Praise_num = new Property(5, Integer.class, "praise_num", false, "PRAISE_NUM");
        public final static Property Has_praise = new Property(6, Boolean.class, "has_praise", false, "HAS_PRAISE");
    }


    public CommentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CommentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: user_id
                "\"ITEM_ID\" INTEGER," + // 2: item_id
                "\"COMMENT\" TEXT," + // 3: comment
                "\"COMMENT_TIME\" INTEGER," + // 4: comment_time
                "\"PRAISE_NUM\" INTEGER," + // 5: praise_num
                "\"HAS_PRAISE\" INTEGER);"); // 6: has_praise
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommentInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        Long item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindLong(3, item_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(4, comment);
        }
 
        java.util.Date comment_time = entity.getComment_time();
        if (comment_time != null) {
            stmt.bindLong(5, comment_time.getTime());
        }
 
        Integer praise_num = entity.getPraise_num();
        if (praise_num != null) {
            stmt.bindLong(6, praise_num);
        }
 
        Boolean has_praise = entity.getHas_praise();
        if (has_praise != null) {
            stmt.bindLong(7, has_praise ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommentInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        Long item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindLong(3, item_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(4, comment);
        }
 
        java.util.Date comment_time = entity.getComment_time();
        if (comment_time != null) {
            stmt.bindLong(5, comment_time.getTime());
        }
 
        Integer praise_num = entity.getPraise_num();
        if (praise_num != null) {
            stmt.bindLong(6, praise_num);
        }
 
        Boolean has_praise = entity.getHas_praise();
        if (has_praise != null) {
            stmt.bindLong(7, has_praise ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommentInfo readEntity(Cursor cursor, int offset) {
        CommentInfo entity = new CommentInfo();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommentInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setItem_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setComment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setComment_time(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setPraise_num(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setHas_praise(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommentInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommentInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommentInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
