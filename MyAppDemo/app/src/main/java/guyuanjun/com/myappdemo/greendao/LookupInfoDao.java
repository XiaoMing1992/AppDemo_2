package guyuanjun.com.myappdemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import guyuanjun.com.myappdemo.bean.LookupInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOOKUP_INFO".
*/
public class LookupInfoDao extends AbstractDao<LookupInfo, Long> {

    public static final String TABLENAME = "LOOKUP_INFO";

    /**
     * Properties of entity LookupInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Item_id = new Property(1, Long.class, "item_id", false, "ITEM_ID");
        public final static Property Time = new Property(2, java.util.Date.class, "time", false, "TIME");
        public final static Property Flag_type = new Property(3, int.class, "flag_type", false, "FLAG_TYPE");
    }


    public LookupInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LookupInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOOKUP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ITEM_ID\" INTEGER," + // 1: item_id
                "\"TIME\" INTEGER," + // 2: time
                "\"FLAG_TYPE\" INTEGER NOT NULL );"); // 3: flag_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOOKUP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LookupInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindLong(2, item_id);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time.getTime());
        }
        stmt.bindLong(4, entity.getFlag_type());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LookupInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindLong(2, item_id);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time.getTime());
        }
        stmt.bindLong(4, entity.getFlag_type());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LookupInfo readEntity(Cursor cursor, int offset) {
        LookupInfo entity = new LookupInfo();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LookupInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setFlag_type(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LookupInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LookupInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LookupInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
